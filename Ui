local GuiElementType = {
    Unknown = 0,
    Root = 1,
    Category = 2,
    Section = 3,
    Header = 4,
    Entry = 5,
    UiElement = 6,
}

local GuiElement = {}
GuiElement.__index = GuiElement

function GuiElement:New(type, parent, guiObject)
    local element = setmetatable({}, GuiElement)
    element.Type = type or GuiElementType.Unknown
    element.Parent = parent or element.Parent
    element.Children = {}
    element.GuiObject = guiObject or nil

    if parent then
        parent:AddChild(element)
    end

    return element
end

function GuiElement:AddChild(child)
    child.Parent = self
    table.insert(self.Children, child)

    if child.GuiObject and self.GuiObject then
        child.GuiObject.Parent = self.GuiObject
    end
end

function GuiElement:RecursiveUpdateGui()
    self:UpdateGui()

    for _, child in ipairs(self.Children) do
        child:RecursiveUpdateGui()
    end
end

function GuiElement:UpdateGui()
end

local UiDefaults = {
    PrimaryColor = Color3.fromRGB(27, 38, 59),
    SecondaryColor = Color3.fromRGB(13, 27, 42),
    AccentColor = Color3.fromRGB(41, 115, 115),
    TextColor = Color3.new(1, 1, 1),
    Font = Enum.Font.Gotham,
    TextSize = 13,
    HeaderWidth = 300,
    HeaderHeight = 32,
    EntryMargin = 1,
    AnimationDuration = 0.4,
    AnimationEasingStyle = Enum.EasingStyle.Quint,
    DefaultEntryHeight = 35,
}

local UiElement = {}
UiElement.__index = UiElement
setmetatable(UiElement, GuiElement)

function UiElement:New(size, position)
    local element = setmetatable(GuiElement:New(GuiElementType.UiElement), UiElement)
    element.Value = nil
    element.Title = ""
    element.Size = size
    element.Position = position

    return element
end

function UiElement:SetValue()
end

function UiElement:GetValue()
    return self.Value
end

local Button = {}
Button.__index = Button
setmetatable(Button, UiElement)

function Button:New()
    local element = setmetatable(UiElement:New(UDim2.new(0, 20, 0, 20), UDim2.new(1, -20 - 5, 0.5, -20 / 2)), Button)
    element.GuiObject = Instance.new("TextButton")
    element.GuiObject.MouseButton1Click:Connect(function()
        element.Parent.Parent.Collapsed = not element.Parent.Parent.Collapsed
        if element.Parent.Parent.Collapsed then
            element.Parent.Parent:Collapse()
        else
            element.Parent.Parent:Expand()
        end
    end)

    return element
end

function Button:Collapse()
    self.GuiObject.Text = "+"
end

function Button:Expand()
    self.GuiObject.Text = "-"
end

function Button:UpdateGui()
    self.GuiObject.TextScaled = true
    self.GuiObject.TextColor3 = UiDefaults.TextColor
    self.GuiObject.BackgroundTransparency = 1
    self.GuiObject.Size = self.Size
    self.GuiObject.Position = self.Position

    if self.Parent.Parent.Collapsed then
        self.GuiObject.Text = "+"
    else
        self.GuiObject.Text = "-"
    end
end

local Header = {}
Header.__index = Header
setmetatable(Header, GuiElement)

function Header:New()
    local element = setmetatable(GuiElement:New(GuiElementType.Header), Header)
    element.GuiObject = Instance.new("TextLabel")
    element.CollapseButton = Button:New()
    element:AddChild(element.CollapseButton)

    return element
end

function Header:UpdateGui()
    self.GuiObject.Size = UDim2.new(1, 0, 0, UiDefaults.HeaderHeight)
    self.GuiObject.Text = self.Parent.Title
    self.GuiObject.TextSize = UiDefaults.TextSize * 1.25
    self.GuiObject.TextColor3 = UiDefaults.TextColor
    self.GuiObject.Font = UiDefaults.Font
    self.GuiObject.BorderSizePixel = 0
    self.GuiObject.BackgroundColor3 = UiDefaults.SecondaryColor

    if self.Parent.Type == GuiElementType.Category then
        self.TextSize = UiDefaults.TextSize * 1.5
    end
end

local Entry = {}
Entry.__index = Entry
setmetatable(Entry, GuiElement)

function Entry:New(height)
    local element = setmetatable(GuiElement:New(GuiElementType.Entry), Entry)
    element.Value = nil
    element.Height = height or UiDefaults.DefaultEntryHeight
    element.GuiObject = Instance.new("Frame")

    return element
end

function Entry:SetValue()
end

function Entry:GetValue()
end

function Entry:UpdateGui()
    self.GuiObject.BackgroundColor3 = UiDefaults.PrimaryColor
    self.GuiObject.BorderSizePixel = 0
    self.GuiObject.Size = UDim2.new(1, 0, 0, self.Height)
end

local Section = {}
Section.__index = Section
setmetatable(Section, GuiElement)

function Section:New(title)
    local element = setmetatable(GuiElement:New(GuiElementType.Section), Section)
    element.Collapsed = false
    element.Height = 0
    element.GuiObject = Instance.new("Frame")
    element.Header = Header:New()
    element.Title = title or "Section"
    element:AddChild(element.Header)

    return element
end

function Section:UpdateGui()
    self.GuiObject.Size = UDim2.new(1, 0, 0, self.Height)
    self.Header.Size = UDim2.new(1, 0, 0, UiDefaults.HeaderHeight)
    self.Header.Position = UDim2.new(0, 0, 0, 0)
    self.Header.Title = self.Title
    self.Header:UpdateGui()

    if self.Collapsed then
        self.GuiObject.Visible = false
    else
        self.GuiObject.Visible = true
    end
end

function Section:Collapse()
    self.Collapsed = true
    self:RecursiveUpdateGui()
end

function Section:Expand()
    self.Collapsed = false
    self:RecursiveUpdateGui()
end

local Category = {}
Category.__index = Category
setmetatable(Category, Section)

function Category:New(title)
    local element = setmetatable(Section:New(title), Category)
    element.Height = 0

    return element
end

local Root = {}
Root.__index = Root
setmetatable(Root, Category)

function Root:New(title)
    local element = setmetatable(Category:New(title), Root)

    return element
end

local Gui = {}
Gui.__index = Gui
setmetatable(Gui, Root)

function Gui:New()
    local element = setmetatable(Root:New("Gui"), Gui)
    element.GuiObject = Instance.new("ScreenGui")
    element.GuiObject.Name = "Gui"
    element.GuiObject.Parent = game.Players.LocalPlayer.PlayerGui

    return element
end

function Gui:Init(title, options)
    local gui = Gui:New(title)

    if options then
        for option, value in pairs(options) do
            if gui[option] ~= nil then
                gui[option] = value
            end
        end
    end

    return gui
end

-- Example usage:
local myGui = Gui:Init("My GUI", {
    PrimaryColor = Color3.fromRGB(0, 128, 255),
    TextColor = Color3.new(0, 0, 0),
})

local category1 = myGui:AddCategory("Category 1")

local section1 = category1:AddSection("Section 1")

local button1 = section1:AddButton("Button 1")
button1.GuiObject.MouseButton1Click:Connect(function()
    print("Button 1 clicked!")
end)

local slider1 = section1:AddSlider("Slider 1")
slider1:SetValue(0.5)
slider1.GuiObject.ValueChanged:Connect(function(value)
    print("Slider 1 value changed:", value)
end)
